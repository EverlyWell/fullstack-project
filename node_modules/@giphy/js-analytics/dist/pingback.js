"use strict";
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var cookie_1 = __importDefault(require("cookie"));
var throttle_debounce_1 = require("throttle-debounce");
var uuid_1 = require("uuid"); // v1 only for pingback verfication
var send_pingback_1 = require("./send-pingback");
var queuedPingbackEvents = [];
/* istanbul ignore next */
var gl = ((typeof window !== 'undefined' ? window : global) || {});
gl.giphyRandomId = '';
var getRandomId = function () {
    // it exists in memory
    if (!gl.giphyRandomId) {
        try {
            // it exists in storage
            gl.giphyRandomId = localStorage.getItem('giphyRandomId');
        }
        catch (_) { }
        if (!gl.giphyRandomId) {
            // we need to create it
            gl.giphyRandomId = uuid_1.v1();
            try {
                // save in storage
                localStorage.setItem('giphyRandomId', gl.giphyRandomId);
            }
            catch (_) { }
        }
    }
    return gl.giphyRandomId;
};
var loggedInUserId = '';
function sendPingbacks() {
    var sendEvents = __spreadArrays(queuedPingbackEvents);
    queuedPingbackEvents = [];
    send_pingback_1.sendPingback(sendEvents);
}
var debouncedPingbackEvent = throttle_debounce_1.debounce(1000, sendPingbacks);
var pingback = function (_a) {
    var gif = _a.gif, userId = _a.userId, eventType = _a.eventType, actionType = _a.actionType, attributes = _a.attributes, _b = _a.queueEvents, queueEvents = _b === void 0 ? true : _b;
    // save the user id for whenever create session is invoked
    loggedInUserId = userId ? String(userId) : loggedInUserId;
    /* istanbul ignore next */
    // get the giphy_pbid cookie
    var user_id = cookie_1.default.parse(document ? document.cookie : {}).giphy_pbid;
    var newEvent = {
        ts: Date.now(),
        attributes: attributes,
        action_type: actionType,
    };
    if (loggedInUserId) {
        newEvent.logged_in_user_id = loggedInUserId;
    }
    if (gif) {
        if (!gif.analytics_response_payload) {
            // abort pingback, analytics_response_payload is required for gif events
            return;
        }
        var gifEvent = newEvent;
        gifEvent.analytics_response_payload = gif.analytics_response_payload;
    }
    if (user_id) {
        newEvent.user_id = user_id;
    }
    else {
        newEvent.random_id = getRandomId();
    }
    if (eventType) {
        newEvent.event_type = eventType;
    }
    queuedPingbackEvents.push(newEvent);
    queueEvents ? debouncedPingbackEvent() : sendPingbacks();
};
exports.default = pingback;
//# sourceMappingURL=pingback.js.map